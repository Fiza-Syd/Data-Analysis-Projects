Day:1
Q1: Aiming to categorize users based on their engagement, specifically, the number of 'like' and 'comment' actions they've performed and 
then analyze their transaction behavior within these categories.

WITH interactions AS (
    SELECT 
        u.id AS user_id,
        COUNT(DISTINCT t.transaction_id) AS transaction_count,
        SUM(CASE WHEN e.action IN ('like', 'comment') THEN 1 ELSE 0 END) AS num_likes_comments
    FROM users u
    LEFT JOIN transactions t ON u.id = t.user_id
    LEFT JOIN events e ON u.id = e.user_id
    GROUP BY u.id
)

SELECT 
    CASE 
        WHEN num_likes_comments IS NULL OR num_likes_comments BETWEEN 0 AND 20 THEN '0-20 Interactions'
        WHEN num_likes_comments BETWEEN 21 AND 40 THEN '21-40 Interactions'
        ELSE '40+ Interactions'
    END AS interaction_group,
    COUNT(*) AS user_count,
    SUM(transaction_count) AS total_transactions,
    ROUND(SUM(transaction_count) * 1.0 / COUNT(*), 2) AS avg_trans_per_user
FROM interactions
GROUP BY interaction_group;

--SELF JOINS:

Q2: Given a table of product subscriptions that includes each user's subscription start and end dates, a query that returns a TRUE or FALSE value for each subscription needs 
to be written indicating whether its date range overlaps with any other completed (i.e., non-null end date) subscription for the same user.

SELECT  s1.user_id as user,
        MAX(CASE WHEN s1.start_date BETWEEN s2.start_date AND s2.end_date
             OR WHEN s1.end_date BETWEEN s2.start_date AND s2.end_date THEN 1 ELSE 0 END) AS overlap
FROM subscriptions s1
LEFT JOIN subscriptions s2
ON s1.user_id<>s2.user_id
GROUP BY s1.user_id;


Q3. Write a query to identify the manager with the biggest team size. You may assume there is only one manager with the target team size.

SELECT m.name as manager,
       COUNT(DISTINCT e.id) as team_size,
FROM employees e
LEFT JOIN managers m
ON e.manager_id=m.id
GROUP BY m.name
ORDER BY COUNT(DISTINCT e.id) DESC
LIMIT 1;

